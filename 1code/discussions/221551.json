[
  {
    "Id": "473155",
    "ThreadId": "221551",
    "Html": "<p>I am writing an ActiveX in C#, to be used in a legacy C++ application.<br>It all works ok, apart from event handling.</p>\r\n<p>The problem is that when the event is raised in C# I get the following error:</p>\r\n<p>&nbsp;</p>\r\n<pre>An unhandled exception of type 'System.InvalidCastException' occurred in AwDotNetPinchOcx.dll\r\n Additional information: Unable to cast COM object of type 'System.__ComObject' to interface type 'AwDotNetPinchOcx.__AwPinchGrid'. \r\n This operation failed because the QueryInterface call on the COM component for the interface with IID '{76F027EC-3D40-449E-B7E6-EFDF7CC63963}' \r\n failed due to the following error: No such interface supported (Exception from HRESULT: 0x80004002 (E_NOINTERFACE)).</pre>\r\n<p><br>However, the C# ActiveX works fine in a test VB6 app.<br>And, a native VB6 ActiveX works fine in the C++ application!</p>\r\n<p><br>My work-around at the moment is therefore a VB6 ActiveX wrapper that contains the C# ActiveX,<br>and passes data and events across.</p>\r\n<p><br>I want to get rid of this wrapper though.<br>Can anyone help?</p>\r\n<p><br>=====================================<br>The C++ app uses the ConnectionPoint event sink method:<br>=====================================</p>\r\n<pre>DWORD EventSinkHolder::AddEventSink(REFIID iid, IUnknown* pYourEventSink)\r\n   {\r\n   DWORD sinkCookie = 0;\r\n   IUnknown* pEventSource = EventSourceInterface();\r\n   HASSERT(pEventSource);\r\n   LPCONNECTIONPOINTCONTAINER pConnectionPointContainer = NULL;\r\n   if (SUCCEEDED(pEventSource-&gt;QueryInterface(IID_IConnectionPointContainer, (void**)&amp;pConnectionPointContainer)))\r\n      {\r\n      HASSERT(pConnectionPointContainer);\r\n      LPCONNECTIONPOINT pConnectionPoint = NULL;\r\n      if (SUCCEEDED(pConnectionPointContainer-&gt;FindConnectionPoint(iid, &amp;pConnectionPoint)))\r\n         {\r\n         HASSERT(pConnectionPoint);\r\n         // connect passed event sink interface to event source\r\n         pConnectionPoint-&gt;Advise(pYourEventSink, &amp;sinkCookie);\r\n         pConnectionPoint-&gt;Release();\r\n         // record connection for benefit of RemoveAllEventSinks\r\n         mySinkEntries.Append(new EventSinkEntry(iid, sinkCookie));\r\n         }\r\n      pConnectionPointContainer-&gt;Release();\r\n      }\r\n   return sinkCookie;\r\n   }</pre>\r\n<p>&nbsp;</p>\r\n<p>=====================================<br>=====================================<br>The C# ActiveX follows the standard method used in the Codeplex sample &quot;CSActiveX&quot;</p>\r\n<p><a href=\"http://1code.codeplex.com/SourceControl/changeset/view/45838#394692\">http://1code.codeplex.com/SourceControl/changeset/view/45838#394692</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-07-27T05:31:34.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]