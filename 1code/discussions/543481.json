[
  {
    "Id": "1238494",
    "ThreadId": "543481",
    "Html": "I have downloaded this project from here --&gt;&gt; <a href=\"http://code.msdn.mic...l-file-7a9bb404\" rel=\"nofollow\">http://code.msdn.mic...l-file-7a9bb404</a>\r<br />\n<br />\nThis one works fine and it's a great commented code to understand even for beginners like myself, but it only works with one table per sheet. Once I add second table in sheet, it throws an error that something is wrong in one of the columns in my spreadsheet: It says: &quot; Error occurs! The error message is: Cannot find column 4. &quot;\r<br />\n<br />\nBasically, I have this type of tables in my spreadsheet:\r<br />\n<br />\n<img src=\"http://i.stack.imgur.com/hr3Mq.png\" alt=\"Image\" />\r<br />\n<br />\nSo I want that my program would export those two tables in a single .XML file (just read them both). And those two tables should be separated in two XML childs: the upper one should be Order-Header and the lower one - Line-Items, like this:<br />\n<pre><code>&lt;ROOT&gt;\n   &lt;Order-Header&gt;\n       .....\n   &lt;/Order-Header&gt;\n   &lt;Line-Items&gt;\n       .....\n   &lt;/Line-Items&gt;\n&lt;/ROOT&gt; </code></pre>\n\nConvertExcelToXML.cs:<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExp&lt;b&gt;&lt;/b&gt;ressions;\nusing DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Spreadsheet;\n\nnamespace CSOpenXmlExcelToXml\n{\n    public class ConvertExcelToXml\n    {\n        /// &lt;summary&gt;\n        ///  Read Data from selected excel file into DataTable\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;filename&quot;&gt;Excel File Path&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private DataTable ReadExcelFile(string filename)\n        {\n            // Initialize an instance of DataTable\n            DataTable dt = new DataTable();\n\n            try\n            {\n                // Use SpreadSheetDocument class of Open XML SDK to open excel file\n                using (SpreadsheetDocument spreadsheetDocument = Spreadsheetdocument.Open(filename, false))\n                {\n\n                    // Get Workbook Part of Spread Sheet Document\n                    WorkbookPart workbookPart = spreadsheetdocument.WorkbookPart;\n\n                    // Get all sheets in spread sheet document \n                    IEnumerable&lt;Sheet&gt; sheetcollection = spreadsheetdocument.WorkbookPart.Workbook.GetFirstChild&lt;Sheets&gt;().Elements&lt;Sheet&gt;();\n\n                    // Get relationship Id\n                    string relationshipId = sheetcollection.First().Id.Value;\n\n                    // Get sheet1 Part of Spread Sheet Document\n                    WorksheetPart worksheetPart = (WorksheetPart)spreadsheetdocument.WorkbookPart.GetPartById(relationshipId);\n\n                    // Get Data in Excel file\n                    SheetData sheetData = worksheetPart.Worksheet.Elements&lt;SheetData&gt;().First();\n                    IEnumerable&lt;Row&gt; rowcollection = sheetData.Descendants&lt;Row&gt;();\n\n                    // If there is no rows in the spreadsheet at all, when just return in how it is and output it\n                    if (rowcollection.Count() == 0)\n                    {\n                        return dt;\n                    }\n\n                    // ============================================================================================================\n\n                    // Add columns\n                    foreach (Cell cell in rowcollection.ElementAt(0))\n                    {\n                        dt.Columns.Add(GetValueOfCell(spreadsheetDocument, cell));\n                    }\n\n                    // Add rows into DataTable\n                    foreach (Row row in rowcollection)\n                    {\n                        // Create temporary row to read rows in spreadsheet\n                        DataRow temprow = dt.NewRow();\n                        int columnIndex = 0;\n                        foreach (Cell cell in row.Descendants&lt;Cell&gt;())\n                        {\n                            // Get Cell Column Index\n                            int cellColumnIndex = GetColumnIndex(GetColumnName(cell.CellReference));\n\n                            if (columnIndex &lt; cellColumnIndex)\n                            {\n                                do\n                                {\n                                    temprow[columnIndex] = string.Empty;\n                                    columnIndex++;\n                                }\n\n                                while (columnIndex &lt; cellColumnIndex);\n                            }\n\n                            temprow[columnIndex] = GetValueOfCell(spreadsheetDocument, cell);\n                            columnIndex++;\n                        }\n\n                        // Add the row to DataTable\n                        // the rows include header row\n                        dt.Rows.Add(temprow);\n                    }\n                }\n\n                // Here remove header row\n                dt.Rows.RemoveAt(0);\n                return dt;\n            }\n\n            // Throw error message\n            catch (IOException ex)\n            {\n                throw new IOException(ex.Message);\n            }\n        }\n\n        /// &lt;summary&gt;\n        ///  Get Value of Cell\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;spreadsheetdocument&quot;&gt;SpreadSheet Document Object&lt;/param&gt;\n        /// &lt;param name=&quot;cell&quot;&gt;Cell Object&lt;/param&gt;\n        /// &lt;returns&gt;The Value in Cell&lt;/returns&gt;\n        private static string GetValueOfCell(SpreadsheetDocument spreadsheetdocument, Cell cell)\n        {\n            // Get value in Cell\n            SharedStringTablePart sharedString = spreadsheetdocument.WorkbookPart.SharedStringTablePart;\n            if (cell.CellValue == null)\n            {\n                return string.Empty;\n            }\n\n            string cellValue = cell.CellValue.InnerText;\n            \n            // The condition that the Cell DataType is SharedString\n            if (cell.DataType != null &amp;&amp; cell.DataType.Value == CellValues.SharedString)\n            {\n                return sharedString.SharedStringTable.ChildElements[int.Parse(cellValue)].InnerText;\n            }\n            else\n            {\n                return cellValue;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Get Column Name From given cell name\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;cellReference&quot;&gt;Cell Name(For example,A1)&lt;/param&gt;\n        /// &lt;returns&gt;Column Name(For example, A)&lt;/returns&gt;\n        private string GetColumnName(string cellReference)\n        {\n            // Create a regular exp&lt;b&gt;&lt;/b&gt;ression to match the column name of cell\n            Regex regex = new Regex(&quot;[A-Za-z]+&quot;);\n            Match match = regex.Match(cellReference);\n            return match.Value;\n        }\n\n        /// &lt;summary&gt;\n        /// Get Index of Column from given column name\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;columnName&quot;&gt;Column Name(For Example,A or AA)&lt;/param&gt;\n        /// &lt;returns&gt;Column Index&lt;/returns&gt;\n        private int GetColumnIndex(string columnName)\n        {\n            int columnIndex = 0;\n            int factor = 1;\n\n            // From right to left\n            for (int position = columnName.Length - 1; position &gt;= 0; position--)   \n            {\n                // For letters\n                if (Char.IsLetter(columnName[position]))\n                {\n                    columnIndex += factor * ((columnName[position] - 'A') + 1) - 1;\n                    factor *= 26;\n                }\n            }\n\n            return columnIndex;\n        }\n\n        /// &lt;summary&gt;\n        /// Convert DataTable to Xml format\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;filename&quot;&gt;Excel File Path&lt;/param&gt;\n        /// &lt;returns&gt;Xml format string&lt;/returns&gt;\n        public string GetXML(string filename)\n        {\n            using (DataSet ds = new DataSet())\n            {\n                ds.DataSetName = &quot;Document-Order&quot;;\n                ds.Tables.Add(this.ReadExcelFile(filename));\n                return ds.GetXml();\n            }\n        }\n    }\n}</code></pre>\n\nAs I understand, my code cannot go through all the spreadsheet I have. It bascially stops at first table last column last cell.\r<br />\n<br />\n \r<br />\n<br />\nP.S. I copied all the code because I think it is the easier way to spot where to change it, to read those two tables in one spreadsheet and export them both in one XML file.\r<br />\n<br />\n<br />\nWould appreciate any help or just some ideas, how could I archieve this kind of functionality. Thank you. <br />\n",
    "PostedDate": "2014-04-27T04:20:58.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]