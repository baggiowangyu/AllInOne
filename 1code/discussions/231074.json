[
  {
    "Id": "507954",
    "ThreadId": "231074",
    "Html": "<p>We are encountering a Databind error message associated with CSASPNETFormViewUpload.</p>\r\n<p>There appears to be no overload for the&nbsp;DataAdapter.Fill() method that accepts (DataSet, DataTableName):</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/system.data.common.dataadapter.fill(v=VS.85).aspx\">http://msdn.microsoft.com/en-us/library/system.data.common.dataadapter.fill(v=VS.85).aspx</a></p>\r\n<p>&nbsp;</p>\r\n<p>Here is the behind code:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>Imports System.Data\r\nImports System.Data.SqlClient\r\nPartial Class _Default\r\n    Inherits System.Web.UI.Page\r\n\r\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\r\n        ' The Page is accessed for the first time.\r\n        If Not IsPostBack Then\r\n            ' Enable the FormView paging option and \r\n            ' specify the PageButton count.\r\n            fvPerson.AllowPaging = True\r\n            fvPerson.PagerSettings.PageButtonCount = 15\r\n\r\n            ' Populate the FormView control.\r\n            BindFormView()\r\n        End If\r\n    End Sub\r\n    Private Sub BindFormView()\r\n        ' Get the connection string from Web.config. \r\n        ' When we use Using statement, \r\n        ' we don't need to explicitly dispose the object in the code, \r\n        ' the using statement takes care of it.\r\n        Using conn As New SqlConnection(ConfigurationManager.ConnectionStrings(&quot;sqlapplicationConnectionString&quot;).ToString())\r\n            ' Create a DataSet object.\r\n            Dim dsApplication As New DataSet()\r\n\r\n            ' Create a SELECT query.\r\n            Dim strSelectCmd As String = &quot;SELECT First,Last,City, State FROM Application&quot;\r\n\r\n            ' Create a SqlDataAdapter object\r\n            ' SqlDataAdapter represents a set of data commands and a \r\n            ' database connection that are used to fill the DataSet and \r\n            ' update a SQL Server database. \r\n            Dim da As New SqlDataAdapter(strSelectCmd, conn)\r\n\r\n            ' Open the connection\r\n            conn.Open()\r\n\r\n            ' Fill the DataTable named &quot;Application&quot; in DataSet with the rows\r\n            ' returned by the query.\r\n            da.Fill(dsApplication, &quot;Application&quot;)\r\n\r\n            ' Bind the FormView control.\r\n            fvPerson.DataSource = dsApplication\r\n            fvPerson.DataBind()\r\n        End Using\r\n    End Sub\r\n    ' FormView.ItemInserting Event\r\n    Protected Sub fvPerson_ItemInserting(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewInsertEventArgs) Handles fvPerson.ItemInserting\r\n        ' Get the connection string from Web.config. \r\n        ' When we use Using statement, \r\n        ' we don't need to explicitly dispose the object in the code, \r\n        ' the using statement takes care of it.\r\n        Using conn As New SqlConnection(ConfigurationManager.ConnectionStrings(&quot;sqlapplicationConnectionString&quot;).ToString())\r\n            ' Create a command object.\r\n            Dim cmd As New SqlCommand()\r\n\r\n            ' Assign the connection to the command.\r\n            cmd.Connection = conn\r\n\r\n            ' Set the command text\r\n            ' SQL statement or the name of the stored procedure. \r\n            cmd.CommandText = &quot;INSERT INTO Person ( First, Last, City, State ) VALUES ( @First, @Last, @City, @State )&quot;\r\n\r\n            ' Set the command type\r\n            ' CommandType.Text for ordinary SQL statements; \r\n            ' CommandType.StoredProcedure for stored procedures.\r\n            cmd.CommandType = CommandType.Text\r\n\r\n            ' Get the first name and last name from the \r\n            ' InsertItemTemplate of the FormView control.\r\n            Dim strFirst As String = DirectCast(fvPerson.Row.FindControl(&quot;First&quot;), TextBox).Text\r\n            Dim strLast As String = DirectCast(fvPerson.Row.FindControl(&quot;Last&quot;), TextBox).Text\r\n            Dim strCity As String = DirectCast(fvPerson.Row.FindControl(&quot;City&quot;), TextBox).Text\r\n            Dim strState As String = DirectCast(fvPerson.Row.FindControl(&quot;State&quot;), TextBox).Text\r\n\r\n            ' Append the parameters to the SqlCommand and set values.\r\n            cmd.Parameters.Add(&quot;@First&quot;, SqlDbType.NVarChar, 50).Value = strFirst\r\n            cmd.Parameters.Add(&quot;@Last&quot;, SqlDbType.NVarChar, 50).Value = strLast\r\n            cmd.Parameters.Add(&quot;@City&quot;, SqlDbType.NVarChar, 50).Value = strCity\r\n            cmd.Parameters.Add(&quot;@State&quot;, SqlDbType.NVarChar, 50).Value = strState\r\n\r\n            ' Open the connection.\r\n            conn.Open()\r\n\r\n            ' Execute the command.\r\n            cmd.ExecuteNonQuery()\r\n        End Using\r\n\r\n        ' Switch FormView control to the ReadOnly display mode. \r\n        fvPerson.ChangeMode(FormViewMode.ReadOnly)\r\n\r\n        ' Rebind the FormView control to show data after inserting.\r\n        BindFormView()\r\n    End Sub\r\n\r\n    ' FormView.ItemUpdating Event\r\n    Protected Sub fvPerson_ItemUpdating(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewUpdateEventArgs) Handles fvPerson.ItemUpdating\r\n        ' Get the connection string from Web.config. \r\n        ' When we use Using statement, \r\n        ' we don't need to explicitly dispose the object in the code, \r\n        ' the using statement takes care of it.\r\n        Using conn As New SqlConnection(ConfigurationManager.ConnectionStrings(&quot;sqlapplicationConnectionString&quot;).ToString())\r\n            ' Create a command object.\r\n            Dim cmd As New SqlCommand()\r\n\r\n            ' Assign the connection to the command.\r\n            cmd.Connection = conn\r\n\r\n            ' Set the command type\r\n            ' CommandType.Text for ordinary SQL statements; \r\n            ' CommandType.StoredProcedure for stored procedures.\r\n            cmd.CommandType = CommandType.Text\r\n\r\n            ' Get the person ID, first name and last name from the \r\n            ' EditItemTemplate of the FormView control.\r\n            Dim strFirst As String = DirectCast(fvPerson.Row.FindControl(&quot;First&quot;), Label).Text\r\n            Dim strLast As String = DirectCast(fvPerson.Row.FindControl(&quot;Last&quot;), TextBox).Text\r\n            Dim strCity As String = DirectCast(fvPerson.Row.FindControl(&quot;City&quot;), TextBox).Text\r\n            Dim strState As String = DirectCast(fvPerson.Row.FindControl(&quot;State&quot;), TextBox).Text\r\n\r\n            ' Append the parameters to the SqlCommand and set values.\r\n            cmd.Parameters.Add(&quot;@First&quot;, SqlDbType.NVarChar, 50).Value = strFirst\r\n            cmd.Parameters.Add(&quot;@Last&quot;, SqlDbType.NVarChar, 50).Value = strLast\r\n            cmd.Parameters.Add(&quot;@City&quot;, SqlDbType.NVarChar, 50).Value = strCity\r\n            cmd.Parameters.Add(&quot;@State&quot;, SqlDbType.NVarChar, 50).Value = strState\r\n\r\n            ' Open the connection.\r\n            conn.Open()\r\n\r\n            ' Execute the command.\r\n            cmd.ExecuteNonQuery()\r\n        End Using\r\n\r\n        ' Switch FormView control to the ReadOnly display mode. \r\n        fvPerson.ChangeMode(FormViewMode.ReadOnly)\r\n\r\n        ' Rebind the FormView control to show data after updating.\r\n        BindFormView()\r\n    End Sub\r\n    ' FormView.PageIndexChanging Event\r\n    Protected Sub fvPerson_PageIndexChanging(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewPageEventArgs) Handles fvPerson.PageIndexChanging\r\n        ' Set the index of the new display page. \r\n        fvPerson.PageIndex = e.NewPageIndex\r\n\r\n        ' Rebind the FormView control to show data in the new page.\r\n        BindFormView()\r\n    End Sub\r\n\r\n    ' FormView.ModeChanging Event\r\n    Protected Sub fvPerson_ModeChanging(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewModeEventArgs) Handles fvPerson.ModeChanging\r\n        ' Switch FormView control to the new mode\r\n        fvPerson.ChangeMode(e.NewMode)\r\n\r\n        ' Rebind the FormView control to show data in new mode.\r\n        BindFormView()\r\n    End Sub\r\n    Public Function strLong(ByVal pstrText As String) As String\r\n\r\n        Dim strTemp As String = Nothing\r\n        Dim lngI As Long = 0\r\n        strTemp = &quot;&quot;\r\n        For lngI = 1 To Strings.Len(pstrText)\r\n            If Strings.InStr(1, &quot;1234567890&quot;, Strings.Mid(pstrText, lngI, 1)) &gt; 0 Then\r\n                strTemp = strTemp &amp; Strings.Mid(pstrText, lngI, 1)\r\n            End If\r\n        Next\r\n        Return Strings.Left(strTemp, 20)\r\n    End Function\r\nEnd Class\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-15T12:03:56.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "507966",
    "ThreadId": "231074",
    "Html": "<p>Go to the following URL link to view the front code at <a href=\"http://cforedu.com\">http://cforedu.com</a></p>",
    "PostedDate": "2010-10-15T12:19:17.34-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]