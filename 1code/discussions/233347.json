[
  {
    "Id": "516534",
    "ThreadId": "233347",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on your various managed Shell Extension for C# I tried to do a sample for a CopyHook extension. Unfortunately it does not seem to work. regasm.exe etc. all works fine but copying/renaming a folder does not show the MessageBox. Any ideas what's wrong\r\n here? Registry entries, wrong interfaces? As soon as this sample is running we could add it to the AIO Code Framework. Thanks Yves</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Diagnostics;\r\n<span style=\"color:blue\">using</span> System.Runtime.InteropServices;\r\n\r\n<span style=\"color:blue\">namespace</span> CopyHookExtension\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">enum</span> eCOPYCALLBACK_STATUS : <span style=\"color:blue\">uint</span>\r\n    {\r\n        IDCANCEL = 2,\r\n        IDYES = 6,\r\n        IDNO = 7\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">enum</span> eSHELL_FILE_OPERATIONS : <span style=\"color:blue\">uint</span>\r\n    {\r\n        FO_MOVE = 1,\r\n        FO_COPY = 2,\r\n        FO_DELETE = 3,\r\n        FO_RENAME = 4\r\n    }\r\n\r\n    <span style=\"color:green\">/*\r\n    [ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid(&quot;000214FC-0000-0000-C000-000000000046&quot;)]\r\n    public interface ICopyHook\r\n    {\r\n        [PreserveSig]\r\n        uint CopyCallback(IntPtr hwnd,\r\n                          uint wFunc,\r\n                          uint wFlags,\r\n                          [MarshalAs(UnmanagedType.LPWStr)] string pszSrcFile,\r\n                          uint dwSrcAttribs,\r\n                          [MarshalAs(UnmanagedType.LPWStr)] string pszDestFile,\r\n                          uint dwDestAttribs);\r\n    }*/</span>\r\n\r\n\r\n    [ComVisible(<span style=\"color:blue\">false</span>), ComImport, Guid(<span style=\"color:#a31515\">&quot;000214FC-0000-0000-C000-000000000046&quot;</span>),\r\n        InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> ICopyHookW\r\n    {\r\n        [PreserveSig()]\r\n        <span style=\"color:blue\">uint</span> CopyCallback(IntPtr hwnd, <span style=\"color:blue\">uint</span> wFunc, <span style=\"color:blue\">uint</span> wFlags, String pszSrcFile, UInt32 dwSrcAttribs, String pszDestFile, UInt32 dwDestAttribs);\r\n    }\r\n\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SHFILEOPSTRUCT\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> hwnd;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> wFunc;\r\n\r\n        [MarshalAs(UnmanagedType.LPWStr)] <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> pFrom;\r\n\r\n        [MarshalAs(UnmanagedType.LPWStr)] <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> pTo;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> fFlags;\r\n\r\n        [MarshalAs(UnmanagedType.Bool)] <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> fAnyOperationsAborted;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> hNameMappings;\r\n\r\n        [MarshalAs(UnmanagedType.LPWStr)] <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> lpszProgressTitle;\r\n    }\r\n\r\n    [Guid(<span style=\"color:#a31515\">&quot;4B4E267C-5049-48E4-AE66-1400AE327804&quot;</span>), ComVisible(<span style=\"color:blue\">true</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyCopyHook : ICopyHookW\r\n    {\r\n        <span style=\"color:blue\">public</span> Object m_object_SynchronizationObject = <span style=\"color:blue\">new</span> Object();\r\n\r\n        <span style=\"color:blue\">#region</span> Shell Extension Registration\r\n\r\n        [ComRegisterFunction()]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Register(Type t)\r\n        {\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                ShellExtReg.RegisterShellExtCopyHookHandler(t);\r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ex)\r\n            {\r\n                Console.WriteLine(ex.Message); <span style=\"color:green\">// Log the error</span>\r\n                <span style=\"color:blue\">throw</span>;  <span style=\"color:green\">// Re-throw the exception</span>\r\n            }\r\n        }\r\n\r\n        [ComUnregisterFunction()]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Unregister(Type t)\r\n        {\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                ShellExtReg.UnregisterShellExtContextMenuHandler(t);\r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ex)\r\n            {\r\n                Console.WriteLine(ex.Message); <span style=\"color:green\">// Log the error</span>\r\n                <span style=\"color:blue\">throw</span>;  <span style=\"color:green\">// Re-throw the exception</span>\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">uint</span> CopyCallback(IntPtr hwnd, <span style=\"color:blue\">uint</span> wFunc, <span style=\"color:blue\">uint</span> wFlags, <span style=\"color:blue\">string</span> pszSrcFile, <span style=\"color:blue\">uint</span> dwSrcAttribs, <span style=\"color:blue\">string</span> pszDestFile, <span style=\"color:blue\">uint</span> dwDestAttribs)\r\n        {\r\n            System.Windows.Forms.MessageBox.Show(<span style=\"color:#a31515\">&quot;HUIUIUI&quot;</span>);\r\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">uint</span>)eCOPYCALLBACK_STATUS.IDYES;\r\n        }\r\n\r\n        <span style=\"color:green\">/*\r\n        public uint CopyCallback(IntPtr hwnd,\r\n                                 uint wFunc,\r\n                                 uint wFlags,\r\n                                 [MarshalAs(UnmanagedType.LPWStr)] string pszSrcFile,\r\n                                 uint dwSrcAttribs,\r\n                                 [MarshalAs(UnmanagedType.LPWStr)] string pszDestFile,\r\n                                 uint dwDestAttribs)\r\n        {\r\n            System.Windows.Forms.MessageBox.Show(&quot;HUIUIUI&quot;);\r\n            return (uint) eCOPYCALLBACK_STATUS.IDYES;\r\n        }*/</span>\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>---</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> Microsoft.Win32;\r\n\r\n<span style=\"color:blue\">namespace</span> CopyHookExtension\r\n{\r\n    <span style=\"color:blue\">internal</span> <span style=\"color:blue\">class</span> ShellExtReg\r\n    {\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Register the context menu handler.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;t&quot;&gt;</span><span style=\"color:green\">COM class&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;fileType&quot;&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The file type that the context menu handler is associated with. For </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> example, '*' means all file types; '.txt' means all .txt files. The </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> parameter must not be NULL or an empty string. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;friendlyName&quot;&gt;</span><span style=\"color:green\">Friendly name of the component&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RegisterShellExtCopyHookHandler(Type t)\r\n        {            \r\n            <span style=\"color:green\">/*    \r\n            string keyName = string.Format(@&quot;Software\\Classes\\CLSID\\{0}&quot;, t.GUID.ToString(&quot;B&quot;).ToUpper());\r\n                using (RegistryKey key = Registry.CurrentUser.CreateSubKey(keyName))\r\n                {                                        \r\n                    key.SetValue(null, &quot;Test Copy Hook Shell Extension&quot;);\r\n\r\n                    RegistryKey inProcKey = key.CreateSubKey(&quot;InProcServer32&quot;);\r\n                    if (inProcKey != null)\r\n                    {\r\n                        inProcKey.SetValue(null, @&quot;C:\\temp\\CopyHookExtension\\CopyHookExtension\\bin\\Debug\\CopyHookExtension.dll&quot;);\r\n                        inProcKey.SetValue(&quot;ThreadingModel&quot;, &quot;Apartment&quot;);\r\n                    }\r\n                }\r\n              */</span>                      \r\n            <span style=\"color:blue\">string</span> keyName = <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">@&quot;Software\\Classes\\Directory\\shellex\\CopyHookHandlers\\Test&quot;</span>);\r\n            <span style=\"color:blue\">using</span> (RegistryKey key = Registry.CurrentUser.CreateSubKey(keyName))\r\n            {\r\n                <span style=\"color:green\">// Set the default value of the key.</span>\r\n                <span style=\"color:blue\">if</span> (key != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    key.SetValue(<span style=\"color:blue\">null</span>, <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">@&quot;{0}&quot;</span>, t.GUID.ToString(<span style=\"color:#a31515\">&quot;B&quot;</span>).ToUpper()));\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Unregister the context menu handler.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;t&quot;&gt;</span><span style=\"color:green\">COM class&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;fileType&quot;&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The file type that the context menu handler is associated with. For </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> example, '*' means all file types; '.txt' means all .txt files. The </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> parameter must not be NULL or an empty string. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> UnregisterShellExtContextMenuHandler(Type t)\r\n        {\r\n            <span style=\"color:green\">/*\r\n            string keyName = string.Format(@&quot;Software\\Classes\\Directory\\shellex\\CopyHookHandlers\\Cyberduck&quot;);\r\n            Registry.CurrentUser.DeleteSubKeyTree(keyName);*/</span>\r\n\r\n            <span style=\"color:blue\">string</span> keyName = <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">@&quot;Directory\\shellex\\CopyHookHandlers\\Test&quot;</span>);\r\n            Registry.ClassesRoot.DeleteSubKeyTree(keyName);\r\n\r\n            keyName = <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">@&quot;Software\\Classes\\CLSID\\{0}&quot;</span>, t.GUID.ToString(<span style=\"color:#a31515\">&quot;B&quot;</span>).ToUpper());\r\n            Registry.CurrentUser.DeleteSubKeyTree(keyName);\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-03T09:16:23.353-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518086",
    "ThreadId": "233347",
    "Html": "\r\n<p>Anybody?</p>\r\n<p>Thanks!<br>\r\nYves</p>\r\n",
    "PostedDate": "2010-11-06T00:51:48.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518359",
    "ThreadId": "233347",
    "Html": "\r\n<p>Hello</p>\r\n<p>Sorry for my late response. I monitor the Issue Tracker page every day because of\r\n<a href=\"http://1code.codeplex.com/wikipage?title=NEW%2c%20FREE%20Code%20Sample%20Request%20Service%20from%20Microsoft%20All-In-One%20Code%20Framework&referringTitle=Documentation\">\r\nthe new code sample request service<br>\r\n</a>I suggest that you post a code sample request to us, and I will write this sample for you after I finish the preview handler sample requested by another community member.</p>\r\n<p>Regards,<br>\r\nJialiang Ge<br>\r\nProgram Manager of All-In-One Code Framework</p>\r\n",
    "PostedDate": "2010-11-07T06:08:49.663-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518362",
    "ThreadId": "233347",
    "Html": "Hi Jialiang,<br /><br />Great to hear! Really looking forward to seeing a working example of a <br />CopyHook implementation in C#.<br /><br />Thanks<br />Yves",
    "PostedDate": "2010-11-07T06:12:53.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]