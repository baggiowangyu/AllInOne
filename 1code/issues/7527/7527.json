{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "A lot of programmers and demo makers seem to forget that the keyboard is still an efficient form of data entry and UI control. A sample to something a little more complex like pressing the escape key to handle multiple states in a WPF application would be desirable. The states on each key press would be undo the current field, undo the current record, close the view without code behind.",
    "LastUpdatedDate": "2013-02-21T19:00:43.993-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "1code",
    "ReportedDate": "2010-10-31T21:17:21.6-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Request: WPF Keybinding to close the current view from ViewModel without code behind",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 7527
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Hello N2Cheval \r\n\r\nThank you for using our sample request service! (http://1code.codeplex.com/wikipage?title=NEW%2c%20FREE%20Code%20Sample%20Request%20Service%20from%20Microsoft%20All-In-One%20Code%20Framework) \r\n\r\nFrom your description, I learnt that you want a code sample that handles the key press by KeyBinding on the close command, and implement the close command using the MVVM pattern. It would need code-behind to implement the close command, but regarding the KeyBinding, it does not need code-behind. \r\n\r\nIs I understanding correct?\r\n\r\nThanks\r\nJialiang Ge\r\n\r\n",
      "PostedDate": "2010-11-01T02:36:36.603-07:00",
      "Id": -2147483648
    },
    {
      "Message": "That's right, but a bit more. Re-reading my question, unfortunately I think I'm asking two things; 1) Close current view from ViewModel cleanly without code behind in the View and 2) a cache-able state machine to roll back changes.\r\nFor example with #1 the best so far has three parts, but I think there must be a better way of doing it.\r\nXAML\r\n<Window.InputBindings>\r\n        <KeyBinding Key=\"Escape\" Command=\"{Binding CloseCommand}\" />\r\n    </Window.InputBindings>\r\nViewModel\r\nRelayCommand _closeCommand;\r\npublic ICommand CloseCommand {\r\n            get {\r\n                if (_closeCommand == null){\r\n                    _closeCommand = new RelayCommand(param => Close(),param => CanClose());\r\n                }\r\n                return _closeCommand;\r\n            }\r\n        }\r\n        public event Action RequestClose;\r\n        public virtual void Close(){\r\n            if (RequestClose != null) { RequestClose(); }\r\n        }\r\n        public virtual bool CanClose() { return true; }\r\nView code behind\r\n  private SomeThingViewModel _vm;\r\n  public SomeThingView() {\r\n            Mouse.OverrideCursor = Cursors.Wait;\r\n            InitializeComponent();\r\n            this.Loaded += SomeThingView_Loaded;\r\n            Mouse.OverrideCursor = null;\r\n        }\r\n        private void SomeThingView_Loaded(object sender, RoutedEventArgs e) {\r\n            _vm = (SomeThingViewModel)this.DataContext;\r\n            _vm.RequestClose += () => { Close(); };\r\n        }\r\nFor #2, I've not seen a good way of doing this with #1 as the final result. Can this be done?",
      "PostedDate": "2010-11-01T05:36:07.06-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T19:00:43.993-08:00",
      "Id": -2147483648
    }
  ]
}