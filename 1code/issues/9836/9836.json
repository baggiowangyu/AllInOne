{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi developement team ,\n \nPlease could you help me  In the case of Window Mobile Application development of Camera application\nBelow I am showing my sample \nActually I had sample Application, this sample Application working fine  with  CN50 intermec windows Mobile  and with Psion teklogix Ikon windows Mobile also.(This is without Integration)\n \nEspecially this error coming , when I am integrating with my existing Mobile Application. In this case As per debugging through my code I am getting error like \nSysytem.Invalidoperation {Unknown error Occurred.}\n \nat Microsoft.WindowsMobile.Forms.CameraCaptureDialog.LaunchCameraCaptureDialog(IntPtr  \nptrStruct)\n   at Microsoft.WindowsMobile.Forms.CameraCaptureDialog.ShowDialog()\n   at wwMobileDevice.frmPicture.ShowCamera()\n   at wwMobileDevice.frmPicture.btnCamera_Click(Object sender, EventArgs e)\n   at System.Windows.Forms.Control.OnClick(EventArgs e)\n   at System.Windows.Forms.Button.OnClick(EventArgs e)\n   at System.Windows.Forms.ButtonBase.WnProc(WM wm, Int32 wParam, Int32 lParam)\n   at System.Windows.Forms.Control._InternalWnProc(WM wm, Int32 wParam, Int32 lParam)\n   at Microsoft.AGL.Forms.EVL.EnterMainLoop(IntPtr hwnMain)\n   at System.Windows.Forms.Application.Run(Form fm)\n   at wwMobileDevice.Program.Main(String[] argv)\n \nHere two cases are there .\n1)\tOur integrated Mobile Camera Application is working  fine with Psion teklogix Ikon windows Mobile Device. \n2)\tBut Integrated Mobile Camera Application Is Not working with  Intermec  CN50 windows Mobile Device.\n3)\tIn this CN50 device Problem coming with DialogResult dRes = cdlg.ShowDialog();Method Of  Microsoft.windowsMobile.Forms.dll  through my code.\n4)\tAny way Iam Showing my code here \n                     \n           This is my Integrated code and I am trying in this way.\n \n \n \nusing System;\n//using System.Linq;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.IO;\nusing System.Windows.Forms;\nusing Microsoft.WindowsMobile.Forms;\nusing System.Runtime.InteropServices;\nusing Microsoft.WindowsCE.Forms;\nnamespace wwMobileDevice\n{\n    public partial class frmPicture : Form\n    {\n        private clsData dataFMO = clsData.GetInstance();\n        private string sEndorsementId;\n        private Bitmap myImager;\n        string result = null;\n        string filePath = null;\n        bool Captured = false;\n \n        private System.Windows.Forms.Timer timer;\n        hwndutils subClassUtils;\n \n        //[DllImport(\"coredll.dll\", SetLastError = true)]\n        //public static extern IntPtr DestroyWindow(IntPtr hWnd);\n \n        //[DllImport(\"coredll.dll\", SetLastError = true)]\n        //public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\n \n \n        //CameraCaptureDialog cameraDialog = new CameraCaptureDialog();\n        //string windowTitle = \"\";\n \n        public frmPicture()\n        {\n            InitializeComponent();\n        }\n \n        private void frmPicture_Load(object sender, EventArgs e)\n        {\n \n        }\n        public void RefreshScreen()\n        {\n            //InitializeComponent();\n            sEndorsementId = clsCommon.Instance.getUniqueId();\n            viewPictureBox.Image = null;\n            cmbIssueType.Items.Clear();\n            txtComments.Text = string.Empty;\n            cmbIssueType.Items.Add(\"X\");\n            cmbIssueType.Items.Add(\"Y\");\n            cmbIssueType.Items.Add(\"Z\");\n \n        }\n                    private void ShowCamera()\n        {\n            CameraCaptureDialog cdlg = new CameraCaptureDialog();\n            cdlg.DefaultFileName = \"picture.jpg\";\n            cdlg.InitialDirectory = \"\\\\My Documents\";\n            cdlg.Mode = CameraCaptureMode.Still;\n            cdlg.Owner = this.viewPictureBox;\n            cdlg.StillQuality = CameraCaptureStillQuality.High;\n            cdlg.Title = \"Take a picture and Select\";\n            cdlg.Resolution = new Size(240, 320);\n            GC.Collect();\n \n            //cdlg.VideoTypes = CameraCaptureVideoTypes.All;\n \n            //subclass main window with delay\n            subClassUtils = new hwndutils();\n            timer = new Timer();\n            timer.Interval = 1000;\n            timer.Tick += new EventHandler(timer_Tick);\n            timer.Enabled = true;\n \n            DialogResult dRes = cdlg.ShowDialog();//exactly my error coming at this statement like Unkown error occurred in intermec  CN50 windows Mobile But in another device PsionTeklogix Ikon windows Mobile this  Statement executing successfully. Iam Unable Hanlding this Problem \n \n            filePath = cdlg.FileName.ToString();\n            if (string.IsNullOrEmpty(filePath))\n            {\n                return;\n            }\n            //if (dRes == DialogResult.OK)\n            //{\n            //    //load image \n            //    try\n            //    {\n            //        filePath = cdlg.FileName.ToString();\n            //        if (filePath == null)\n            //        {\n            //            return;\n            //        }\n            //    }\n            //    catch (SystemException sx)\n            //    {\n            //        System.Diagnostics.Debug.WriteLine(sx.Message);\n            //    }\n            //}\n            cdlg.Dispose(); \n \n \n            viewPictureBox.Image = new Bitmap(filePath);\n            this.Show();\n            cdlg.Dispose();\n            //return result;\n \n        }\n \n   void timer_Tick(object sender, EventArgs e)\n        {\n            subClassUtils.winClassName = \"Camera View\";\n            subClassUtils.CloseButtonDisabled = true;\n            System.Threading.Thread.Sleep(500);\n            if (subClassUtils.CloseButtonDisabled)\n                timer.Enabled = false;\n        }\n \n \n \n        public class hwndutils : IDisposable\n        {\n            private string _winClassName = \"HHTaskbar\";\n            public string winClassName\n            {\n                get { return _winClassName; }\n                set\n                {\n                    if (this.oldWndProc == IntPtr.Zero) //only allow change before subclassing\n                        _winClassName = value;\n                }\n            }\n            private bool _mIsStartButtonDisabled = false;\n            private bool _mIsCloseButtonDisabled = false;\n            private IntPtr _mHwnd = IntPtr.Zero;\n            public bool StartButtonDisabled\n            {\n                set\n                {\n                    this._mIsStartButtonDisabled = value;\n                    if (this._mIsStartButtonDisabled)\n                    {\n                        if (this.oldWndProc == IntPtr.Zero) //already hooked?\n                        {\n                            this.hookWindow();\n                        }\n                    }\n                    else\n                    {\n                        if (this._mIsCloseButtonDisabled == false)//we will not unhook if hook is installed for StartButton\n                        {\n                            this.unhookWindow();\n                        }\n                    }\n                }\n                get { return this._mIsStartButtonDisabled; }\n            }\n \n            public bool CloseButtonDisabled\n            {\n                set\n                {\n                    this._mIsCloseButtonDisabled = value;\n                    if (this._mIsCloseButtonDisabled)\n                    {\n                        if (this.oldWndProc == IntPtr.Zero) //already hooked?\n                        {\n                            this.hookWindow();\n                        }\n                    }\n                    else\n                    {\n                        if (this._mIsStartButtonDisabled == false)//we will not unhook if hook is installed for StartButton\n                        {\n                            this.unhookWindow();\n                        }\n                    }\n                }\n                get { return this._mIsCloseButtonDisabled; }\n            }\n            public hwndutils()\n            {\n            }\n \n            //dispose\n            public void Dispose()\n            {\n \n                unhookWindow();\n            }\n \n            private void unhookWindow()\n            {\n                if (this.oldWndProc != IntPtr.Zero && this._mHwnd != IntPtr.Zero)\n                {\n                    SetWindowLong(this._mHwnd, GWL_WNDPROC, this.oldWndProc); //restore old wndproc!\n                    this._mIsStartButtonDisabled = false;\n                    this.oldWndProc = IntPtr.Zero;\n                    this._mHwnd = IntPtr.Zero;\n                }\n            }\n            /// <summary>\n            /// SubClassing: Install the wndproc hook\n            /// </summary>\n            /// <returns></returns>\n            private bool hookWindow()\n            {\n                //find the window to hook\n                IntPtr hWndHooked = FindWindow(_winClassName, IntPtr.Zero);\n                if (hWndHooked == IntPtr.Zero)\n                    return false;\n                //enable the taskbar, not realy necessary\n                EnableWindow(hWndHooked, true);\n                //already installed?\n                if (oldWndProc == IntPtr.Zero)\n                {\n                    //find the menu_worker window\n                    IntPtr hwndMenu_Worker = FindWindow(\"menu_worker\", IntPtr.Zero);\n                    if (hwndMenu_Worker != IntPtr.Zero)\n                    {\n                        //get the child window which has the buttons on it\n                        IntPtr hwndToolbar = GetWindow(hwndMenu_Worker, GetWindow_Cmd.GW_CHILD);\n                        if (hwndToolbar != IntPtr.Zero)\n                        {\n                            _mHwnd = hwndToolbar;       //store to remember\n                            SubclassHWnd(hwndToolbar);  //subclass the wndproc\n                        }\n                    }\n                }\n                return true;\n            }\n            #region PINVOKES\n            // Win32 API needed\n            [DllImport(\"coredll.dll\", SetLastError = true)]\n            public static extern System.UInt32 GetWindowLong(IntPtr hWnd, int nIndex);\n            public enum GWL\n            {\n                GWL_WNDPROC = (-4),\n                GWL_HINSTANCE = (-6),\n                GWL_HWNDPARENT = (-8),\n                GWL_STYLE = (-16),\n                GWL_EXSTYLE = (-20),\n                GWL_USERDATA = (-21),\n                GWL_ID = (-12)\n            }\n            [DllImport(\"coredll.dll\", SetLastError = true)]\n            static extern IntPtr GetWindow(IntPtr hWnd, GetWindow_Cmd uCmd);\n \n            enum GetWindow_Cmd : uint\n            {\n                GW_HWNDFIRST = 0,\n                GW_HWNDLAST = 1,\n                GW_HWNDNEXT = 2,\n                GW_HWNDPREV = 3,\n                GW_OWNER = 4,\n                GW_CHILD = 5,\n                GW_ENABLEDPOPUP = 6\n            }\n            [DllImport(\"coredll.dll\", EntryPoint = \"FindWindow\", SetLastError = true)]\n            public static extern IntPtr FindWindow(string lpClassName, IntPtr lpWindowName);\n            [DllImport(\"coredll.dll\")]\n            public static extern bool EnableWindow(IntPtr hWnd, bool bEnable);\n \n            [DllImport(\"coredll\")]\n            private static extern IntPtr SetWindowLong(IntPtr hWnd, int nIndex, Win32WndProc newProc);\n            [DllImport(\"coredll\")]\n            private static extern IntPtr SetWindowLong(IntPtr hWnd, int nIndex, IntPtr newProc);\n            [DllImport(\"coredll\")]\n            private static extern IntPtr CallWindowProc(IntPtr lpPrevWndFunc, IntPtr hWnd, int Msg, int wParam, int lParam);\n            [DllImport(\"coredll.dll\")]\n            [return: MarshalAs(UnmanagedType.Bool)]\n            public static extern bool GetWindowRect(IntPtr hwnd, out RECT lpRect);\n            [StructLayout(LayoutKind.Sequential)]\n            public struct RECT\n            {\n                public int Left;        // x position of upper-left corner\n                public int Top;         // y position of upper-left corner\n                public int Right;       // x position of lower-right corner\n                public int Bottom;      // y position of lower-right corner\n            }\n            #endregion\n \n            // A delegate that matches Win32 WNDPROC:\n            private delegate IntPtr Win32WndProc(IntPtr hWnd, int Msg, int wParam, int lParam);\n \n            // from winuser.h:\n            private const int GWL_WNDPROC = -4;\n            private const int WM_LBUTTONDOWN = 0x0201;\n            private const int WM_LBUTTONUP = 0x0202;\n \n            // program variables\n            private IntPtr oldWndProc = IntPtr.Zero;\n            private Win32WndProc newWndProc;// = IntPtr.Zero; //null;\n \n            private void SubclassHWnd(IntPtr hWnd)\n            {\n                // hWnd is the window you want to subclass..., create a new \n                // delegate for the new wndproc\n                newWndProc = new Win32WndProc(MyWndProc);\n                // subclass\n                oldWndProc = SetWindowLong(hWnd, GWL_WNDPROC, newWndProc);\n            }\n \n            // this is the new wndproc, just show a messagebox on left button down:\n            private IntPtr MyWndProc(IntPtr hWnd, int msg, int wParam, int lParam)\n            {\n                //is this a message for us?\n                if ((msg == (int)WM_LBUTTONDOWN) || (msg == (int)WM_LBUTTONUP))\n                {\n                    int x = ((int)lParam) & 0xFFFF;\n                    int y = ((int)lParam) >> 16;\n                    System.Diagnostics.Debug.WriteLine(\"MyWndProc got lClick at \" + x.ToString() + \"/\" + y.ToString());\n \n                    if (this._mIsStartButtonDisabled || this._mIsCloseButtonDisabled)\n                    {\n                        bool isVGA;\n                        bool isQVGA;\n                        using (System.Windows.Forms.Control detector = new System.Windows.Forms.Control())\n                        {\n                            using (System.Drawing.Graphics gr = detector.CreateGraphics())\n                            {\n                                isVGA = gr.DpiY == 192;\n                                isQVGA = gr.DpiY == 96;\n                            }\n                        }\n \n                        RECT rect;\n                        GetWindowRect(hWnd, out rect); //get the rectangle of the menu_bar\n \n                        int width = Math.Max(rect.Left, rect.Right) - Math.Min(rect.Left, rect.Right);\n                        int height = Math.Max(rect.Bottom, rect.Top) - Math.Min(rect.Bottom, rect.Top);\n \n                        //width values are assumed\n                        int buttonWidth = (isQVGA | isVGA) ? 92 : 46;\n                        int buttonHeight = height; //(isQVGA | isVGA) ? 72 : 36;\n \n                        System.Drawing.Rectangle rectStartButton = new System.Drawing.Rectangle(0, 0, buttonWidth, buttonHeight);\n                        System.Drawing.Rectangle rectCloseButton = new System.Drawing.Rectangle(width - buttonWidth, 0, buttonWidth, buttonHeight);\n \n                        //check if enabled and click is inside the start or close button rectangle\n                        if (this._mIsStartButtonDisabled && rectStartButton.Contains(x, y))\n                            return IntPtr.Zero;\n                        if (this._mIsCloseButtonDisabled && rectCloseButton.Contains(x, y))\n                            return IntPtr.Zero;\n \n                        //if both are false, we have to provide the click to windows\n                        return CallWindowProc(oldWndProc, hWnd, msg, wParam, lParam);\n                    }\n                    else\n                        return CallWindowProc(oldWndProc, hWnd, msg, wParam, lParam);\n                }\n                else\n                    return CallWindowProc(oldWndProc, hWnd, msg, wParam, lParam);\n            }\n        }\n                  \n \nprivate void btnCamera_Click(object sender, EventArgs e)\n        {\n           \n            ShowCamera();\n        }\n \n}}\n \n \n \nThank you.\nWith Regards,\nsripalb",
    "LastUpdatedDate": "2013-09-18T10:47:25.557-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "1code",
    "ReportedDate": "2011-11-17T04:18:38.28-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Windows Mobile Developement ( problem with CameraApplication in Intermec  CN50 windows Mobile Device)",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 9836
  },
  "FileAttachments": [
    {
      "FileId": 3626,
      "FileName": "WM5ImageProc1.zip",
      "DownloadUrl": ".\\3626"
    }
  ],
  "Comments": [
    {
      "Message": "Here I attached Camera Sample Application. I t will work Fine but Once we Integrating \r\nDialogResult dRes = cdlg.ShowDialog();//exactly my error coming at this statement like Unkown error occurred in intermec CN50 windows Mobile But in another device PsionTeklogix Ikon windows Mobile this Statement executing successfully. Iam Unable Hanlding this Problem \r\n",
      "PostedDate": "2011-11-17T04:25:29.303-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-11-17T04:40:46.08-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-11-17T04:48:06.673-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Hello sripalb, did you get any solution? We have the same issue and we've been trying some workarounds without success. \r\n\r\nI'll appreciate any information.\r\n\r\nThank you!",
      "PostedDate": "2012-07-04T13:03:55.313-07:00",
      "Id": -2147483648
    },
    {
      "Message": "hi elvinmeza,\r\n\r\nI think you guys have been trying some workarounds camera application error. \r\nhere I am also trying to solve that problem.But I am not sure ,I can give you some Information,\r\nthis Information i got from forums ,they are saying like we can't use Barcode scaning,emdi,camera at the sametime.In this case May be camera application raising that problem. for example especially with emdi ,once you capture image after capturing the image you need to disable the property of the document Image(EMDI). In this way we need to check.\r\n",
      "PostedDate": "2012-07-18T23:13:55.64-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:59:36.85-08:00",
      "Id": -2147483648
    },
    {
      "Message": "How can someone even read this garbled text?  Am I missing some setting or?\nThanks,",
      "PostedDate": "2013-09-18T10:47:25.557-07:00",
      "Id": -2147483648
    }
  ]
}