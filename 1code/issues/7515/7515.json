{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2010-11-14T22:27:18.627-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "举例说明。windows的分辨率为1024*768的时候。我的WPF应用程序启动时的窗体大小为900*700。当windows的分辨率为1280*1024的时候。再次启动我的WPF程序时。窗体包括各个控件以及窗体的各个部位的文字、图片等都等比例放大。\n这个在winform中要自己写缩放代码。在WPF中如何能快速的实现该功能。",
    "LastUpdatedDate": "2013-05-16T05:33:22.043-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "1code",
    "ReportedDate": "2010-10-28T20:18:24.407-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "WPF自适应窗体大小",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 7515
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "你好 Stekvo \r\n\r\n感谢你使用我们的 code sample 请求服务。\r\n\r\n我们team正在研究你所提的这个示例需求，以判断其是否适合做成一个示例代码。我们会尽快给你更新。\r\n\r\n如有任何问题，请联系onecode@microsoft.com\r\n\r\n谢谢\r\nJialiang Ge\r\n\r\n",
      "PostedDate": "2010-10-29T07:18:52.823-07:00",
      "Id": -2147483648
    },
    {
      "Message": "你好\r\n\r\n经过讨论，WPF应该是能够自动适应新的resolution的。如果在你的程序中，并没有自动适应，坑能是因为一些控件使用的问题。你能否将你的xaml share出来，或给一个没有自动scale的例子？我们帮你看一下。",
      "PostedDate": "2010-10-29T07:25:46.503-07:00",
      "Id": -2147483648
    },
    {
      "Message": "谢谢Jialiang。\r\n我是WPF初学者。对WPF还比较迷茫。我无法share我的xaml。\r\n看你的回音。你们应该解决了自动适应新的resolution的问题。你们能给一个事例代码吗？\r\n或者给一个解决方案的链接也行。\r\n万分感谢！！！！",
      "PostedDate": "2010-11-01T23:58:24.29-07:00",
      "Id": -2147483648
    },
    {
      "Message": "你好，\r\n\r\n你可以查阅这篇MSDN文档：http://msdn.microsoft.com/en-us/library/ms745058.aspx\r\nWPF能自动支持该项功能，只要你正确使用它的LAYOUT系统。\r\n\r\nWPF provides two panel: Grid and DockPanel can help you to achieve this goal.\r\n\r\nIf you put any control in the Grid panel, and set the Margin property of the control to some value (please do not set the Height and Width properties, that will fix the size of the control). The control can match the size of the Grid and change to the different size when changing the Grid size. A simple sample, in a Grid, the Button and TextBlock can fill and match the Window size:\r\n\r\n<Window x:Class=\"WpfApplication12.MainWindow\"\r\n  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n  Title=\"MainWindow\" Height=\"350\" Width=\"525\">\r\n <Grid>\r\n <TextBlock Text=\"Hello World!\" Margin=\"100,100,100,100\"/>\r\n <Button Content=\"Button\" Margin=\"100,120,100,100\"/>\r\n </Grid>\r\n</Window>\r\nPlease refer to the Layout in WPF: http://msdn.microsoft.com/en-us/library/ms745058.aspx Panels Overview: http://msdn.microsoft.com/en-us/library/ms754152.aspx  and a video http://windowsclient.net/learn/video.aspx?v=76354\r\n\r\nOn the other hand, WPF does no support to change the font text automatically. But if we put the elements in the ViewBox with Stretch property to some value (like Uniform). The inner element can match the size of the ViewBox and the TextBlock can show the appropriate \"font size\":\r\n\r\n <Grid>\r\n <Viewbox Stretch=\"Uniform\">\r\n  <TextBlock Text=\"Hello World!\"/>\r\n </Viewbox>\r\n </Grid>\r\n",
      "PostedDate": "2010-11-02T08:20:23.77-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-11-14T22:27:18.627-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T19:00:44.423-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:33:22.043-07:00",
      "Id": -2147483648
    }
  ]
}